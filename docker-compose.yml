services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: support-tickets-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: support_tickets
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - support-tickets-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: support-tickets-backend
    restart: unless-stopped
    environment:
      PORT: 3000
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: support_tickets
      SESSION_SECRET: docker-secret-key-change-in-production
      FRONTEND_URL: http://localhost:3001
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_FROM: noreply@support-tickets.local
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: sh -c "sleep 5 && npm run seed && npm run dev"
    networks:
      - support-tickets-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: support-tickets-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    networks:
      - support-tickets-network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: support-tickets-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - support-tickets-network

volumes:
  postgres_data:

networks:
  support-tickets-network:
    driver: bridge

